# Library: Olaus Shell Test Library
# Created: 2020-05-08T09:39:07
# Version: A2.0.0
#-h- BEGIN 2020-05-01T15:17:09  27 662 tst_plan.sh
# plan - declare number of tests you are going to run

function tst_plan() {

    if [[ -z "$1" ]]; then
        ols_err 7001 $EX_SOFTWARE "${FUNCNAME}: missing argument 1, tst_no"
        return $EX_SOFTWARE
    else
        local -i tst_no=$1
    fi

    if [[ $tst_no -lt $OLSTST_NOPLAN ]]
    then
        ols_err 7002 $EX_SOFTWARE "tst_plan: tst_no less than 0"
        return $EX_SOFTWARE;
    fi

    if [[ $tst_no -eq $OLSTST_NOPLAN ]]
    then
        printf "\n" >&1                # Send the TAP no test plan.
        return $EX_OK
    fi
    
    printf "1..$tst_no\n" >&1          # Send the TAP test plan to STDOUT.
    return $EX_OK

} # end plan
#-e- END   2020-05-01T15:17:09  27 662 tst_plan.sh
#-h- BEGIN 2020-04-29T16:03:22  158 2664 ok.sh

cat >/dev/null <<'/*'

=head1 NAME

assert - test a variable or condition at critical points in a script.

=head1 SYNOPSIS

assert condition line_no

=head1 DESCRIPTION

The B<assert> function is used to test a variable or condition at critical points in a script.
(This is an idea borrowed from C.)

=head1 ARGUMENTS

=over 4

=item I<condition>

Assert the condition (required)

=item I<line_no>

Line number of the assertion (required)

=back

=head1 EXAMPLES

=head2 One

    . assert.sh

    a=5
    b=4

    condition="$a -ge $b"     

    echo assert "\"$condition\""
    assert "$condition" $LINENO

    condition="$a -lt $b"

    echo assert "\"$condition\""
    assert "$condition" $LINENO

    echo "This statement echoes only if the \"assert\" does not fail."

results in

    assert "5 -ge 4"
    assert "5 -lt 4"
    Assertion failed:  "5 -lt 4", File "ex1.sh", line 14

on stderr.

=head Two

    declare -i x=8
    declare -i y=4

    assert "$x -ge 0" $LINENO

    assert "$y -le 0" $LINENO

results in

    Assertion failed:  "4 -le 0", File "ex2.sh", line 8

on stderr.

=head1 NOTES

=head1 CAVEATS

=head1 DIAGNOSTICS

assert: missing argument 1, condition

assert: missing argument 2, line_no

Assertion failed:

=head1 VERSION

$Revision: 95 $

$Id: nuf.sh 87 2006-09-13 17:06:10Z a0214394 $

=head1 AUTHOR

Mark J Jensen E<lt>mark@jensen.netE<gt>

=head1 HISTORY

2006-09-14 - Function created by nuf ver. 3.0.0. Based upon Mendel Cooper's assert.

=head1 RESOURCES

Mendel Cooper, I<Advanced Bash-Scripting Guide>, Revision 4.0, 2006-06-18.

Wikipedia, I<Assertion (computing)>,
L<http://en.wikipedia.org/wiki/Assertion_(computing)>

=cut

/*

function ok () {


    if [[ $# -eq 0 ]]                            # The Condition arguemnt is required.
    then
        ols_err $EX_USAGE 7001 "ok: missing argument 1, condition"
    else
        local CONDITION="$1"
    fi
    if [[ $# -ge 2 ]]                            # The Test Name argument is optional.
    then
        local TEST_NAME="$2"
    else
        local TEST_NAME=""
    fi
    if [[ $# -ge 3 ]]                            # Diagnostic message argument is optional.
    then
        shift 2
        local DIAGNOSTIC_MESSAGE="$*"
    else
        local DIAGNOSTIC_MESSAGE=""
    fi

    if [[ $CONDITION ]]
    then
        printf "%s" "ok"
    else
        printf "%s" "not ok"
    fi

    OLSTST_NO=$((OLSTST_NO+1))

    printf "%s" " $OLSTST_NO"
    
    if [[ -n $TEST_NAME ]]
    then
        printf "%s" " - $TEST_NAME"
    fi
    if [[ -n "$DIAGNOSTIC_MESSAGE" ]]
    then
        printf "%s"  " # $DIAGNOSTIC_MESSAGE"
    fi
    printf "\n"
 
    return
} # end ok

#-e- END   2020-04-29T16:03:22  158 2664 ok.sh
#-h- BEGIN 2020-05-07T10:17:41   8 137 cmp_ok.sh
# cmp_ok

function cmp_ok()
{
    OLSTST_NO=$(($OLSTST_NO+1))
        printf "ok $OLSTST_NO - cmp_ok: Stub"
    return $EX_OK
} # cmp_ok
#-e- END   2020-05-07T10:17:41   8 137 cmp_ok.sh
#-h- BEGIN 2020-05-08T08:43:24   79 2112 is.sh
# is - compare two arguments with equal to determine success

function is()
{
    if [[ $# -eq 0 ]]
    then
        olserr 7000 $EX_SOFTWARE "${FUNCNAME}: missing arguments 1–3, got, expected and test_name"
    fi
    if [[ $# -eq 1 ]]
    then
        olserr 7000 $EX_SOFTWARE "${FUNCNAME}: missing arguments 2–3, expected and test_name"
    fi
    if [[ $# -eq 2 ]]
    then
        olserr 7000 $EX_SOFTWARE "${FUNCNAME}: missing arguments 3, test_name"
    fi

    got="$1"
    expected="$2"
    test_name="$3"

    if [[ $# -ge 3 ]]                            # Diagnostic message argument is optional.
    then
        shift 3
        local diagnostic_message="$*"
    else
        local diagnostic_message=""
    fi

    
    # BASH has different equal operators for strings and integers.
    # Figure out which one to use.
    # If both got and expected are integers use "-eq" inside "[["
    # otherwise use "==" inside "[[".
    # Use the Bash extended pattern matching to check for integer.

    if [[ "$got" == ?(-)+([0-9]) ]]
    then
        local ngot=$TRUE
    else
        local ngot=$FALSE
    fi
    if [[ "$expected" == ?(-)+([0-9]) ]]
    then
        local nexpected=$TRUE
    else
        local nexpected=$FALSE
    fi

    # Now that the preliminaries are out of the way,
    # let's do the test.

    if [[ $ngot == $TRUE && $nexpected == $TRUE ]]
    then
        if [[ $got -eq $expected ]]    # Both got and expected are integers
        then                           # use the bash numerial comparison
            printf "%s" "ok"
        else
            printf "%s" "not ok"
        fi
    else
        if [[ "$got" == "$expected" ]]     # Got or expected is a string
        then                           # use the bash string comparison.
            printf "%s" "ok"
        else                    
            printf "%s" "not ok"
        fi
    fi

    OLSTST_NO=$((OLSTST_NO+1))
    printf "%s" " $OLSTST_NO - $test_name"
    if [[ -n "$diagnostic_message" ]]
    then
        printf "%s"  " # $diagnostic_message"
    fi
    printf "\n"
 
    return $EX_OK
} # end is
#-e- END   2020-05-08T08:43:24   79 2112 is.sh
#-h- BEGIN 2020-04-28T17:46:26   84 2284 isnot.sh
# isnot - compare two arguments with not equal to determine success

function isnot()
{

#local -a a                   # Hold arguments in an array
#local -i i                   # Index into that array
#local    s                   # Hold argument before array

    if [[ -z $1 ]]
    then
        ols_err 7000 $EX_SOFTWARE "${FUNCNAME}: missing argument 1, got"
    else
        local got="$1"
    fi
    if [[ -z $2 ]]
    then
        ols_err 7000 $EX_SOFTWARE "${FUNCNAME}: missing argument 2, expected"
    else
        local expected="$2"
    fi
    if [[ -z $3 ]]
    then
        ols_err 7000 $EX_SOFTWARE "${FUNCNAME}: missing argument 3, test_name"
    else
        local test_name="$3"
    fi
    shift 3
    if [[ -z $1 ]]                            # Diagnostic message argument is optional.
    then
        local diagnostic_message=''
    else
        local diagnostic_message="$*"
    fi
    
    # BASH has different equal operators for strings and integers.
    # Figure out which one to use.
    # If both got and expected are integers use "-eq" inside "[["
    # otherwise use "==" inside "[[".
    # Use the Bash extended pattern matching to check for integer.

    if [[ "$got" == ?(-)+([0-9]) ]]
    then
        local ngot=$TRUE
    else
        local ngot=$FALSE
    fi
    if [[ "$expected" == ?(-)+([0-9]) ]]
    then
        local nexpected=$TRUE
    else
        local nexpected=$FALSE
    fi

    # Now that the preliminaries are out of the way,
    # let's do the test.

    if [[ $ngot == $TRUE && $nexpected == $TRUE ]]
    then
        if [[ $got -ne $expected ]]    # Both got and expected are integers
        then                           # use the bash numerial comparison
            printf "%s" "ok"
        else
            printf "%s" "not ok"
        fi
    else
        if [[ $got != $expected ]]     # Got or expected is a string
        then                           # use the bash string comparison.
            printf "%s" "ok"
        else                    
            printf "%s" "not ok"
        fi
    fi

    OLSTST_NO=$((OLSTST_NO+1))
    printf "%s" " $OLSTST_NO - $test_name"
    if [[ -n "$diagnostic_message" ]]
    then
        printf "%s"  " # $diagnostic_message"
    fi
    printf "\n"
 
    return $EX_OK
} # end is
#-e- END   2020-04-28T17:46:26   84 2284 isnot.sh
#-h- BEGIN 2020-04-29T17:47:35  13 205 pass.sh


function pass()
{
    OLSTST_NO=$(($OLSTST_NO+1))
    if [[ $# -eq 0 ]]
    then
        printf "ok $OLSTST_NO - pass"
    else
        printf "ok $OLSTST_NO - pass $*"
    fi
    return $EX_OK
} # pass
#-e- END   2020-04-29T17:47:35  13 205 pass.sh
#-h- BEGIN 2020-04-27T07:54:50   9 119 fail.sh


function fail()
{
    OLSTST_NO=$((OLSTST_NO+1))
    printf "not ok $OLSTST - Fail: $*"
 
    return $EX_OK
} # fail
#-e- END   2020-04-27T07:54:50   9 119 fail.sh
#-h- BEGIN 2020-04-29T07:55:53  6 76 diag.sh
function diag()
{
    printf "%s\n" "$*"
 
    return $EX_CODE
} # end diag
#-e- END   2020-04-29T07:55:53  6 76 diag.sh
#-h- BEGIN 2020-04-29T07:24:20   6 152 BAIL_OUT.sh
# is - compare two arguments with = to determine success

function BAIL_OUT() {
    printf "%s\n" "BAIL_OUT: $*"
    exit $EX_TESTBAIL
} # end BAIL_OUT
#-e- END   2020-04-29T07:24:20   6 152 BAIL_OUT.sh
